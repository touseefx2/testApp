{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","getRouteConfigsFromChildren","children","options","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","push","props","Fragment","Group","screenOptions","Error","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","navigatorKey","route","useContext","NavigationRouteContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","initialParamsFromParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setKey","getKey","getIsInitial","NavigationStateContext","initializedState","isFirstStateInitialization","useMemo","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","index","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","NavigationHelpersContext","Provider","value"],"mappings":";;;;;;;AAAA;;AAYA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACAA;;AAOA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAG,CAKlCC,QALkC,EAMlCC,OANkC,KAO/B;AACH,QAAMC,OAAO,GAAGC,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBL,QAAvB,EAAiCM,MAAjC,CAEd,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAAA;;AAChB,sBAAIL,KAAK,CAACM,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/B,UAAIA,KAAK,CAACE,IAAN,KAAeC,eAAnB,EAA2B;AACzB;AACA;AACAJ,QAAAA,GAAG,CAACK,IAAJ,CAAS,CACPX,OADO,EAEPO,KAAK,CAACK,KAFC,CAAT;AAUA,eAAON,GAAP;AACD;;AAED,UAAIC,KAAK,CAACE,IAAN,KAAeP,KAAK,CAACW,QAArB,IAAiCN,KAAK,CAACE,IAAN,KAAeK,cAApD,EAA2D;AACzD;AACA;AACAR,QAAAA,GAAG,CAACK,IAAJ,CACE,GAAGb,2BAA2B,CAC5BS,KAAK,CAACK,KAAN,CAAYb,QADgB,EAE5BQ,KAAK,CAACE,IAAN,KAAeK,cAAf,GACId,OADJ,GAEIA,OAAO,IAAI,IAAX,GACA,CAAC,GAAGA,OAAJ,EAAaO,KAAK,CAACK,KAAN,CAAYG,aAAzB,CADA,GAEA,CAACR,KAAK,CAACK,KAAN,CAAYG,aAAb,CANwB,CADhC;AAUA,eAAOT,GAAP;AACD;AACF;;AAED,UAAM,IAAIU,KAAJ,CACH,oGACC,aAAAd,KAAK,CAACM,cAAN,CAAqBD,KAArB,IACK,IACC,OAAOA,KAAK,CAACE,IAAb,KAAsB,QAAtB,GAAiCF,KAAK,CAACE,IAAvC,kBAA8CF,KAAK,CAACE,IAApD,gDAA8C,YAAYQ,IAC3D,IACC,gBAAAV,KAAK,CAACK,KAAN,sDAAaK,IAAb,GAAqB,oBAAmBV,KAAK,CAACK,KAAN,CAAYK,IAAK,GAAzD,GAA8D,EAC/D,EALL,GAMI,OAAOV,KAAP,KAAiB,QAAjB,GACAW,IAAI,CAACC,SAAL,CAAeZ,KAAf,CADA,GAEC,IAAGa,MAAM,CAACb,KAAD,CAAQ,GACvB,4FAXG,CAAN;AAaD,GAlDe,EAkDb,EAlDa,CAAhB;;AAoDA,MAAIc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCtB,IAAAA,OAAO,CAACuB,OAAR,CAAiBC,MAAD,IAAY;AAC1B,YAAM;AAAER,QAAAA,IAAF;AAAQlB,QAAAA,QAAR;AAAkB2B,QAAAA,SAAlB;AAA6BC,QAAAA;AAA7B,UAA8CF,MAAM,CAAC,CAAD,CAA1D;;AAEA,UAAI,OAAOR,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;AACrC,cAAM,IAAID,KAAJ,CACH,wBAAuBE,IAAI,CAACC,SAAL,CACtBF,IADsB,CAEtB,kDAHE,CAAN;AAKD;;AAED,UACElB,QAAQ,IAAI,IAAZ,IACA2B,SAAS,KAAKE,SADd,IAEAD,YAAY,KAAKC,SAHnB,EAIE;AACA,YAAI7B,QAAQ,IAAI,IAAZ,IAAoB2B,SAAS,KAAKE,SAAtC,EAAiD;AAC/C,gBAAM,IAAIZ,KAAJ,CACH,6DAA4DC,IAAK,oCAD9D,CAAN;AAGD;;AAED,YAAIlB,QAAQ,IAAI,IAAZ,IAAoB4B,YAAY,KAAKC,SAAzC,EAAoD;AAClD,gBAAM,IAAIZ,KAAJ,CACH,gEAA+DC,IAAK,oCADjE,CAAN;AAGD;;AAED,YAAIS,SAAS,KAAKE,SAAd,IAA2BD,YAAY,KAAKC,SAAhD,EAA2D;AACzD,gBAAM,IAAIZ,KAAJ,CACH,iEAAgEC,IAAK,oCADlE,CAAN;AAGD;;AAED,YAAIlB,QAAQ,IAAI,IAAZ,IAAoB,OAAOA,QAAP,KAAoB,UAA5C,EAAwD;AACtD,gBAAM,IAAIiB,KAAJ,CACH,4DAA2DC,IAAK,qDAD7D,CAAN;AAGD;;AAED,YAAIS,SAAS,KAAKE,SAAd,IAA2B,CAAC,iCAAmBF,SAAnB,CAAhC,EAA+D;AAC7D,gBAAM,IAAIV,KAAJ,CACH,6DAA4DC,IAAK,wCAD9D,CAAN;AAGD;;AAED,YAAIU,YAAY,KAAKC,SAAjB,IAA8B,OAAOD,YAAP,KAAwB,UAA1D,EAAsE;AACpE,gBAAM,IAAIX,KAAJ,CACH,gEAA+DC,IAAK,uDADjE,CAAN;AAGD;;AAED,YAAI,OAAOS,SAAP,KAAqB,UAArB,IAAmCA,SAAS,CAACT,IAAV,KAAmB,WAA1D,EAAuE;AACrE;AACA;AACA;AACAY,UAAAA,OAAO,CAACC,IAAR,CACG,qFAAoFb,IAAK,uRAD5F;AAGD;AACF,OAjDD,MAiDO;AACL,cAAM,IAAID,KAAJ,CACH,kFAAiFC,IAAK,qLADnF,CAAN;AAGD;AACF,KAjED;AAkED;;AAED,SAAOhB,OAAP;AACD,CAlID;AAoIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAAS8B,oBAAT,CAObC,YAPa,EAQbhC,OARa,EAeb;AACA,QAAMiC,YAAY,GAAG,oCAArB;AAEA,QAAMC,KAAK,GAAGhC,KAAK,CAACiC,UAAN,CAAiBC,+BAAjB,CAAd;AAIA,QAAM;AAAErC,IAAAA,QAAF;AAAYsC,IAAAA,eAAZ;AAA6B,OAAGC;AAAhC,MAAyCtC,OAA/C;AACA,QAAM;AAAEuC,IAAAA,OAAO,EAAEC;AAAX,MAAsBtC,KAAK,CAACuC,MAAN,CAC1BT,YAAY,CAAC,EACX,GAAKM,IADM;AAEX,QAAIJ,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEQ,MAAP,IACJR,KAAK,CAACQ,MAAN,CAAaC,KAAb,IAAsB,IADlB,IAEJT,KAAK,CAACQ,MAAN,CAAaE,OAAb,KAAyB,KAFrB,IAGJ,OAAOV,KAAK,CAACQ,MAAN,CAAaG,MAApB,KAA+B,QAH3B,GAIA;AAAEC,MAAAA,gBAAgB,EAAEZ,KAAK,CAACQ,MAAN,CAAaG;AAAjC,KAJA,GAKA,IALJ;AAFW,GAAD,CADc,CAA5B;AAYA,QAAME,YAAY,GAAGjD,2BAA2B,CAI9CC,QAJ8C,CAAhD;AAMA,QAAMiD,OAAO,GAAGD,YAAY,CAAC1C,MAAb,CAEd,CAACC,GAAD,EAAMmB,MAAN,KAAiB;AACjB,QAAIA,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAV,IAAkBX,GAAtB,EAA2B;AACzB,YAAM,IAAIU,KAAJ,CACH,6GAA4GS,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAK,IADxH,CAAN;AAGD;;AAEDX,IAAAA,GAAG,CAACmB,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAX,CAAH,GAAsBQ,MAAtB;AACA,WAAOnB,GAAP;AACD,GAXe,EAWb,EAXa,CAAhB;AAaA,QAAM2C,UAAU,GAAGF,YAAY,CAACG,GAAb,CAAkBzB,MAAD,IAAYA,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAvC,CAAnB;AACA,QAAMkC,cAAc,GAAGF,UAAU,CAAC5C,MAAX,CACrB,CAACC,GAAD,EAAM8C,IAAN,KAAe;AAAA;;AACb,UAAM;AAAEC,MAAAA;AAAF,QAAoBL,OAAO,CAACI,IAAD,CAAP,CAAc,CAAd,CAA1B;AACA,UAAME,uBAAuB,GAC3B,CAAApB,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEQ,MAAP,gEAAeC,KAAf,KAAwB,IAAxB,IACA,CAAAT,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEQ,MAAP,kEAAeE,OAAf,MAA2B,KAD3B,IAEA,CAAAV,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEQ,MAAP,kEAAeG,MAAf,MAA0BO,IAF1B,GAGIlB,KAAK,CAACQ,MAAN,CAAaA,MAHjB,GAIId,SALN;AAOAtB,IAAAA,GAAG,CAAC8C,IAAD,CAAH,GACEC,aAAa,KAAKzB,SAAlB,IAA+B0B,uBAAuB,KAAK1B,SAA3D,GACI,EACE,GAAGyB,aADL;AAEE,SAAGC;AAFL,KADJ,GAKI1B,SANN;AAQA,WAAOtB,GAAP;AACD,GAnBoB,EAoBrB,EApBqB,CAAvB;AAsBA,QAAMiD,cAAc,GAAGN,UAAU,CAAC5C,MAAX,CAGrB,CAACC,GAAD,EAAM8C,IAAN,KACEI,MAAM,CAACC,MAAP,CAAcnD,GAAd,EAAmB;AACjB,KAAC8C,IAAD,GAAQJ,OAAO,CAACI,IAAD,CAAP,CAAc,CAAd,EAAiBM;AADR,GAAnB,CAJmB,EAOrB,EAPqB,CAAvB;;AAUA,MAAI,CAACT,UAAU,CAACU,MAAhB,EAAwB;AACtB,UAAM,IAAI3C,KAAJ,CACJ,4FADI,CAAN;AAGD;;AAED,QAAM4C,YAAY,GAAG1D,KAAK,CAAC2D,WAAN,CAClBlB,KAAD,IAAWA,KAAK,CAAClC,IAAN,KAAemB,SAAf,IAA4Be,KAAK,CAAClC,IAAN,KAAe+B,MAAM,CAAC/B,IAD1C,EAEnB,CAAC+B,MAAM,CAAC/B,IAAR,CAFmB,CAArB;AAKA,QAAMqD,kBAAkB,GAAG5D,KAAK,CAAC2D,WAAN,CACxBlB,KAAD,IACEA,KAAK,KAAKf,SAAV,IAAuBe,KAAK,CAACoB,KAAN,KAAgB,KAAvC,IAAgDH,YAAY,CAACjB,KAAD,CAFrC,EAGzB,CAACiB,YAAD,CAHyB,CAA3B;AAMA,QAAM;AACJjB,IAAAA,KAAK,EAAEqB,YADH;AAEJC,IAAAA,QAAQ,EAAEC,eAFN;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA;AANI,MAOFpE,KAAK,CAACiC,UAAN,CAAiBoC,+BAAjB,CAPJ;AASA,QAAM,CAACC,gBAAD,EAAmBC,0BAAnB,IAAiDvE,KAAK,CAACwE,OAAN,CAAc,MAAM;AAAA;;AACzE;AACA;AACA;AACA;AACA,QACE,CAACV,YAAY,KAAKpC,SAAjB,IAA8B,CAACgC,YAAY,CAACI,YAAD,CAA5C,KACA,CAAA9B,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEQ,MAAP,kEAAeC,KAAf,KAAwB,IAF1B,EAGE;AACA,aAAO,CACLH,MAAM,CAACmC,eAAP,CAAuB;AACrB1B,QAAAA,UADqB;AAErBE,QAAAA,cAFqB;AAGrBI,QAAAA;AAHqB,OAAvB,CADK,EAML,IANK,CAAP;AAQD,KAZD,MAYO;AAAA;;AACL,aAAO,CACLf,MAAM,CAACoC,kBAAP,wBACE1C,KADF,aACEA,KADF,yCACEA,KAAK,CAAEQ,MADT,mDACE,eAAeC,KADjB,qEAC2BqB,YAD3B,EAEE;AACEf,QAAAA,UADF;AAEEE,QAAAA,cAFF;AAGEI,QAAAA;AAHF,OAFF,CADK,EASL,KATK,CAAP;AAWD,KA7BwE,CA8BzE;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GArCsD,EAqCpD,CAACS,YAAD,EAAexB,MAAf,EAAuBoB,YAAvB,CArCoD,CAAvD;AAuCA,MAAIjB,KAAK,GACP;AACA;AACA;AACAmB,EAAAA,kBAAkB,CAACE,YAAD,CAAlB,GACKA,YADL,GAEKQ,gBANP;AAQA,MAAIK,SAAgB,GAAGlC,KAAvB;;AAEA,MAAI,CAAC,2BAAaA,KAAK,CAACM,UAAnB,EAA+BA,UAA/B,CAAL,EAAiD;AAC/C;AACA4B,IAAAA,SAAS,GAAGrC,MAAM,CAACsC,2BAAP,CAAmCnC,KAAnC,EAA0C;AACpDM,MAAAA,UADoD;AAEpDE,MAAAA,cAFoD;AAGpDI,MAAAA;AAHoD,KAA1C,CAAZ;AAKD;;AAED,QAAMwB,uBAAuB,GAAG7E,KAAK,CAACuC,MAAN,CAAaP,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAEQ,MAApB,CAAhC;AAEAxC,EAAAA,KAAK,CAAC8E,SAAN,CAAgB,MAAM;AACpBD,IAAAA,uBAAuB,CAACxC,OAAxB,GAAkCL,KAAlC,aAAkCA,KAAlC,uBAAkCA,KAAK,CAAEQ,MAAzC;AACD,GAFD,EAEG,CAACR,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEQ,MAAR,CAFH;;AAIA,MAAIR,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEQ,MAAX,EAAmB;AACjB,UAAMuC,cAAc,GAAGF,uBAAuB,CAACxC,OAA/C;AAEA,QAAI2C,MAAJ;;AAEA,QACE,OAAOhD,KAAK,CAACQ,MAAN,CAAaC,KAApB,KAA8B,QAA9B,IACAT,KAAK,CAACQ,MAAN,CAAaC,KAAb,IAAsB,IADtB,IAEAT,KAAK,CAACQ,MAAN,KAAiBuC,cAHnB,EAIE;AACA;AACAC,MAAAA,MAAM,GAAGC,uBAAcC,KAAd,CAAoBlD,KAAK,CAACQ,MAAN,CAAaC,KAAjC,CAAT;AACD,KAPD,MAOO,IACL,OAAOT,KAAK,CAACQ,MAAN,CAAaG,MAApB,KAA+B,QAA/B,KACEX,KAAK,CAACQ,MAAN,CAAaE,OAAb,KAAyB,KAAzB,IAAkC6B,0BAAnC,IACCvC,KAAK,CAACQ,MAAN,KAAiBuC,cAFnB,CADK,EAIL;AACA;AACAC,MAAAA,MAAM,GAAGC,uBAAcE,QAAd,CAAuB;AAC9BpE,QAAAA,IAAI,EAAEiB,KAAK,CAACQ,MAAN,CAAaG,MADW;AAE9BH,QAAAA,MAAM,EAAER,KAAK,CAACQ,MAAN,CAAaA,MAFS;AAG9B4C,QAAAA,IAAI,EAAEpD,KAAK,CAACQ,MAAN,CAAa4C;AAHW,OAAvB,CAAT;AAKD,KAvBgB,CAyBjB;;;AACA,UAAMC,YAAY,GAAGL,MAAM,GACvB1C,MAAM,CAACgD,iBAAP,CAAyBX,SAAzB,EAAoCK,MAApC,EAA4C;AAC1CjC,MAAAA,UAD0C;AAE1CE,MAAAA,cAF0C;AAG1CI,MAAAA;AAH0C,KAA5C,CADuB,GAMvB,IANJ;AAQAsB,IAAAA,SAAS,GACPU,YAAY,KAAK,IAAjB,GACI/C,MAAM,CAACoC,kBAAP,CAA0BW,YAA1B,EAAwC;AACtCtC,MAAAA,UADsC;AAEtCE,MAAAA,cAFsC;AAGtCI,MAAAA;AAHsC,KAAxC,CADJ,GAMIsB,SAPN;AAQD;;AAED,QAAMY,YAAY,GAAG9C,KAAK,KAAKkC,SAA/B;AAEA,kCAAkB,MAAM;AACtB,QAAIY,YAAJ,EAAkB;AAChB;AACAtB,MAAAA,QAAQ,CAACU,SAAD,CAAR;AACD;AACF,GALD,EAhNA,CAuNA;AACA;AACA;;AACAlC,EAAAA,KAAK,GAAGkC,SAAR;AAEA3E,EAAAA,KAAK,CAAC8E,SAAN,CAAgB,MAAM;AACpBZ,IAAAA,MAAM,CAACnC,YAAD,CAAN;;AAEA,QAAI,CAACqC,YAAY,EAAjB,EAAqB;AACnB;AACA;AACA;AACAH,MAAAA,QAAQ,CAACU,SAAD,CAAR;AACD;;AAED,WAAO,MAAM;AACX;AACA;AACA;AACA;AACAa,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIxB,eAAe,OAAOtC,SAAtB,IAAmCyC,MAAM,OAAOpC,YAApD,EAAkE;AAChEkC,UAAAA,QAAQ,CAACvC,SAAD,CAAR;AACD;AACF,OAJS,EAIP,CAJO,CAAV;AAKD,KAVD,CAVoB,CAqBpB;AACD,GAtBD,EAsBG,EAtBH,EA5NA,CAoPA;AACA;AACA;;AACA,QAAM+D,mBAAmB,GAAGzF,KAAK,CAACuC,MAAN,EAA5B;AACAkD,EAAAA,mBAAmB,CAACpD,OAApB,GAA8BiC,gBAA9B;AAEA,QAAMP,QAAQ,GAAG/D,KAAK,CAAC2D,WAAN,CAAkB,MAAa;AAC9C,UAAMG,YAAY,GAAGE,eAAe,EAApC;AAEA,WAAOJ,kBAAkB,CAACE,YAAD,CAAlB,GACFA,YADE,GAEF2B,mBAAmB,CAACpD,OAFzB;AAGD,GANgB,EAMd,CAAC2B,eAAD,EAAkBJ,kBAAlB,CANc,CAAjB;AAQA,QAAM8B,OAAO,GAAG,8BAAsCC,CAAD,IAAO;AAC1D,QAAI5C,UAAU,GAAG,EAAjB;AAEA,QAAIf,KAAJ;;AAEA,QAAI2D,CAAC,CAACC,MAAN,EAAc;AAAA;;AACZ5D,MAAAA,KAAK,GAAGS,KAAK,CAACoD,MAAN,CAAaC,IAAb,CAAmB9D,KAAD,IAAWA,KAAK,CAAC+D,GAAN,KAAcJ,CAAC,CAACC,MAA7C,CAAR;;AAEA,oBAAI5D,KAAJ,mCAAI,OAAOjB,IAAX,EAAiB;AACfgC,QAAAA,UAAU,CAACtC,IAAX,CAAgBuB,KAAK,CAACjB,IAAtB;AACD;AACF,KAND,MAMO;AACLiB,MAAAA,KAAK,GAAGS,KAAK,CAACoD,MAAN,CAAapD,KAAK,CAACuD,KAAnB,CAAR;AACAjD,MAAAA,UAAU,CAACtC,IAAX,CACE,GAAG6C,MAAM,CAAC2C,IAAP,CAAYnD,OAAZ,EAAqBoD,MAArB,CAA6BnF,IAAD;AAAA;;AAAA,eAAU,YAAAiB,KAAK,UAAL,0CAAOjB,IAAP,MAAgBA,IAA1B;AAAA,OAA5B,CADL;AAGD;;AAED,QAAIiB,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AAED,UAAMmE,UAAU,GAAGC,WAAW,CAACpE,KAAK,CAAC+D,GAAP,CAAX,CAAuBI,UAA1C;AAEA,UAAME,SAAS,GAAI,EAAD,CACfC,MADe,EAEd;AACA,OAAG,CACDnE,eADC,EAED,GAAGY,UAAU,CAACC,GAAX,CAAgBjC,IAAD,IAAU;AAC1B,YAAM;AAAEsF,QAAAA;AAAF,UAAgBvD,OAAO,CAAC/B,IAAD,CAAP,CAAc,CAAd,CAAtB;AACA,aAAOsF,SAAP;AACD,KAHE,CAFF,EAMDrD,GANC,CAMIqD,SAAD,IAAe;AACnB,YAAMrD,GAAG,GACP,OAAOqD,SAAP,KAAqB,UAArB,GACIA,SAAS,CAAC;AAAErE,QAAAA,KAAK,EAAEA,KAAT;AAAuBmE,QAAAA;AAAvB,OAAD,CADb,GAEIE,SAHN;AAKA,aAAOrD,GAAG,GACNM,MAAM,CAAC2C,IAAP,CAAYjD,GAAZ,EACGkD,MADH,CACW3F,IAAD,IAAUA,IAAI,KAAKoF,CAAC,CAACpF,IAD/B,EAEGyC,GAFH,CAEQzC,IAAD,IAAUyC,GAAV,aAAUA,GAAV,uBAAUA,GAAG,CAAGzC,IAAH,CAFpB,CADM,GAINmB,SAJJ;AAKD,KAjBE,CAHW,EAsBhB;AACA;AAvBgB,KAwBfwE,MAxBe,CAwBR,CAACK,EAAD,EAAKC,CAAL,EAAQC,IAAR,KAAiBF,EAAE,IAAIE,IAAI,CAACC,WAAL,CAAiBH,EAAjB,MAAyBC,CAxBxC,CAAlB;AA0BAH,IAAAA,SAAS,CAAC/E,OAAV,CAAmBqF,QAAD,IAAcA,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAGhB,CAAH,CAAxC;AACD,GAnDe,CAAhB;AAqDA,+BAAe;AAAElD,IAAAA,KAAF;AAASiD,IAAAA;AAAT,GAAf;AAEA1F,EAAAA,KAAK,CAAC8E,SAAN,CAAgB,MAAM;AACpBY,IAAAA,OAAO,CAACkB,IAAR,CAAa;AAAErG,MAAAA,IAAI,EAAE,OAAR;AAAiBsG,MAAAA,IAAI,EAAE;AAAEpE,QAAAA;AAAF;AAAvB,KAAb;AACD,GAFD,EAEG,CAACiD,OAAD,EAAUjD,KAAV,CAFH;AAIA,QAAM;AAAE4D,IAAAA,SAAS,EAAES,cAAb;AAA6BC,IAAAA;AAA7B,MAA6C,iCAAnD;AAEA,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAuC,sCAA7C;AAEA,QAAMC,QAAQ,GAAG,0BAAY;AAC3B5E,IAAAA,MAD2B;AAE3ByB,IAAAA,QAF2B;AAG3BE,IAAAA,QAH2B;AAI3B8B,IAAAA,GAAG,EAAE/D,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE+D,GAJe;AAK3BoB,IAAAA,eAAe,EAAEL,cAAc,CAAC9B,MALL;AAM3BoC,IAAAA,qBAAqB,EAAEJ,cAAc,CAACK,YANX;AAO3BC,IAAAA,mBAAmB,EAAE;AACnBvE,MAAAA,UADmB;AAEnBE,MAAAA,cAFmB;AAGnBI,MAAAA;AAHmB,KAPM;AAY3BqC,IAAAA;AAZ2B,GAAZ,CAAjB;AAeA,QAAM6B,YAAY,GAAG,8BAAgB;AACnCjF,IAAAA,MADmC;AAEnCyD,IAAAA,GAAG,EAAE/D,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE+D,GAFuB;AAGnChC,IAAAA,QAHmC;AAInCE,IAAAA;AAJmC,GAAhB,CAArB;AAOA,QAAMkC,UAAU,GAAG,mCAKjB;AACAe,IAAAA,QADA;AAEAnD,IAAAA,QAFA;AAGA2B,IAAAA,OAHA;AAIApD,IAAAA;AAJA,GALiB,CAAnB;AAYA,mDAAmC;AACjC6D,IAAAA,UADiC;AAEjCqB,IAAAA,gBAAgB,EAAEV,cAAc,CAACW;AAFA,GAAnC;AAKA,8BAAc;AACZ1D,IAAAA,QADY;AAEZ2D,IAAAA,iBAAiB,EAAEV,cAAc,CAACjD;AAFtB,GAAd;AAKA,QAAMqC,WAAW,GAAG,6BAKlB;AACA3D,IAAAA,KADA;AAEAK,IAAAA,OAFA;AAGAqD,IAAAA,UAHA;AAIAtF,IAAAA,aAAa,EAAEf,OAAO,CAACe,aAJvB;AAKA8G,IAAAA,oBAAoB,EAAE7H,OAAO,CAAC6H,oBAL9B;AAMAT,IAAAA,QANA;AAOAnD,IAAAA,QAPA;AAQAE,IAAAA,QARA;AASAsD,IAAAA,YATA;AAUAR,IAAAA,WAVA;AAWAE,IAAAA,gBAXA;AAYA3E,IAAAA,MAZA;AAaA;AACAoD,IAAAA;AAdA,GALkB,CAApB;AAsBA,iCAAiB;AACfjD,IAAAA,KADe;AAEf0D,IAAAA,UAFe;AAGfC,IAAAA;AAHe,GAAjB;AAMA,QAAMwB,iBAAiB,GAAG,2BAAaC,kCAAyBC,QAAtC,EAAgD;AACxEC,IAAAA,KAAK,EAAE5B;AADiE,GAAhD,CAA1B;AAIA,SAAO;AACL1D,IAAAA,KADK;AAEL0D,IAAAA,UAFK;AAGLC,IAAAA,WAHK;AAILwB,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  options?: ScreenConfigWithParent<State, ScreenOptions, EventMap>[0]\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push([\n          options,\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        ]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.type !== Group\n              ? options\n              : options != null\n              ? [...options, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config[1];\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config[1].name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config[1].name}')`\n      );\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config[1].name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr][1].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames/routeParamList in the dep list\n    // below. We want to avoid forcing a new state to be calculated in cases\n    // where routeConfigs change without affecting routeNames/routeParamList.\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name][1];\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]}