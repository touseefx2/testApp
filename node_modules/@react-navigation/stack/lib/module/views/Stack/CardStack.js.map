{"version":3,"sources":["CardStack.tsx"],"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","flatten","headerStyle","height","headerStatusBarHeight","top","getDistanceFromOptions","descriptor","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","OS","gestureEnabled","transitionSpec","cardStyleInterpolator","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","initialMetrics","frame","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","lastIndexOf","floatingHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","isDark","interpolationIndex","cardStyleInterpolatorCurrent","isNextScreenTransparent","detachCurrentScreen","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 &&\n          nextDescriptor &&\n          nextDescriptor.options.presentation !== 'transparentModal'\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        let defaultTransitionPreset =\n          optionsForTransitionConfig.presentation === 'modal'\n            ? ModalTransition\n            : optionsForTransitionConfig.presentation === 'transparentModal'\n            ? ModalFadeTransition\n            : DefaultTransition;\n\n        const {\n          animationEnabled = Platform.OS !== 'web' &&\n            Platform.OS !== 'windows' &&\n            Platform.OS !== 'macos',\n          gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n          gestureDirection = defaultTransitionPreset.gestureDirection,\n          transitionSpec = defaultTransitionPreset.transitionSpec,\n          cardStyleInterpolator = animationEnabled === false\n            ? forNoAnimationCard\n            : defaultTransitionPreset.cardStyleInterpolator,\n          headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = (Platform.OS !== 'ios' &&\n            optionsForTransitionConfig.presentation !== 'transparentModal') ||\n            cardStyleInterpolator === forModalPresentationIOS,\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            optionsForTransitionConfig.presentation === 'transparentModal' ||\n            nextDescriptor?.options.presentation === 'modal' ||\n            nextDescriptor?.options.presentation === 'transparentModal' ||\n            cardStyleInterpolator === forModalPresentationIOS\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animationEnabled,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next:\n              nextGesture &&\n              nextDescriptor.options.presentation !== 'transparentModal'\n                ? getProgressFromGesture(\n                    nextGesture,\n                    state.layout,\n                    nextDescriptor\n                  )\n                : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : options.cardStyleInterpolator === forModalPresentationIOS\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              cardStyleInterpolator,\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (headerTintColor) {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            let interpolationIndex = 0;\n\n            for (let i = index - 1; i >= 0; i--) {\n              const cardStyleInterpolatorCurrent =\n                scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n              if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n                break;\n              }\n\n              interpolationIndex++;\n            }\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}